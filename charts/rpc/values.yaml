# set the log level for the node
logLevel: "error"

# override the fullname
fullnameOverride: null
nameOverride: null

# rpc node moniker, will default to the fullname
moniker: null

# number of nodes to run
replicaCount: 1

# chain id of lava
chainId: "lava-testnet-2"

# set the directory to mount the data volume to
dataDir: "/data"

# set the volume storage size
storageSize: "500Gi"

# set if using a custom genesis.json
genesisJson: null

# use snapshot for downloading the chain
snapshot:
  enabled: false
  url: null
  command:
    - "/bin/sh"
    - "-c"
    - |
      set -ex
      echo "[$(date)] starting"
      SNAPSHOT_URL="{{ required ".Values.snapshot.url is required" .Values.snapshot.url }}"
      TMP_DIR="{{.Values.dataDir}}/tmp"
      SNAPSHOT_FILE="$TMP_DIR/snapshot.tar.zst"
      RPC_DATA_DIR="{{ .Values.dataDir }}"
      SNAPSHOT_COMPLETE_FILE="$RPC_DATA_DIR/db/snapshot_extraction_complete"

      mkdir -p "$RPC_DATA_DIR/db"
      mkdir -p "$RPC_DATA_DIR/data"
      mkdir -p "$RPC_DATA_DIR/config"
      mkdir -p "$RPC_DATA_DIR/cosmovisor"

      if [ ! -f "$SNAPSHOT_COMPLETE_FILE" ]; then
        mkdir -p "$TMP_DIR"

        curl -sSL "$SNAPSHOT_URL" -o "$SNAPSHOT_FILE"
        echo "[$(date)] downloading complete"

        tar -axf "$SNAPSHOT_FILE" -C "{{ .Values.dataDir }}/data"
        echo "[$(date)] extraction complete"

        rm -rf "$TMP_DIR"

        echo $(date) >> "$SNAPSHOT_COMPLETE_FILE"
      else
        echo "RPC data directory is not empty, skipping snapshot download"
        echo $SNAPSHOT_COMPLETE_FILE
      fi

      {{- if .Values.genesisJson }}
      if [ ! -f "$RPC_DATA_DIR/config/genesis.json" ]; then
        curl -sSL "{{ .Values.genesisJson }}" -o "$RPC_DATA_DIR/config/genesis.json"
      fi
      {{- end }}
  image:
    repository: us-central1-docker.pkg.dev/lavanet-public/images/snapshot-extractor
    tag: "latest"
    pullPolicy: Always

# setup ingress for the node
# example:
# ingress:
#  enabled: true
#  tlsOverride:
#    - secretName: lava-rpc-tls
#      hosts:
#        - lava-rpc.example.com
#  rulesOverride:
#    - host: lava-rpc.example.com
#      http:
#        paths:
#          - path: /
#            backend:
#              serviceName: lava-rpc
#              servicePort: 5000
#  annotations: {}
ingress:
  enabled: true
  className: "nginx"
  host: null
  annotations: {}
  http:
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    paths:
      - port: rest
        hostPrefix: ""
        path: /rest/(.*)
        pathType: ImplementationSpecific

      - port: rest
        hostPrefix: ""
        path: /rest/(.*)/
        pathType: ImplementationSpecific

      - port: rpc
        hostPrefix: ""
        path: /rpc/(.*)
        pathType: ImplementationSpecific

      - port: rpc
        hostPrefix: ""
        path: /rpc/(.*)/
        pathType: ImplementationSpecific

      - port: rpc
        hostPrefix: ""
        path: /rpc(.*)
        pathType: Prefix

      - port: rpc
        hostPrefix: ""
        path: /(.*)
        pathType: ImplementationSpecific

      - port: grpc-web
        hostPrefix: grpc-web
        path: /
        pathType: Prefix
  grpc:
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    paths:
      - port: grpc
        hostPrefix: grpc
        path: /
        pathType: Prefix
  certificateName: null
  tlsOverride: null
  rulesOverride: null

# add custom environment variables to the node using secret of configs
envFrom: []

# add custom environment variables to the node
env:
  - name: "SEED_NODES"
    value: "3a445bfdbe2d0c8ee82461633aa3af31bc2b4dc0@testnet2-seed-node.lavanet.xyz:26656,e593c7a9ca61f5616119d6beb5bd8ef5dd28d62d@testnet2-seed-node2.lavanet.xyz:26656"

# image to deploy
image:
  repository: us-central1-docker.pkg.dev/lavanet-public/images/lava-rpc
  pullPolicy: Always
  tag: v0.21.1.2

# port to expose the node on
ports:
  - name: rpc
    number: 26657
    protocol: TCP
  - name: rest
    number: 1317
    protocol: TCP
  - name: grpc
    number: 9090
    protocol: TCP
  - name: grpc-web
    number: 9091
    protocol: TCP

# set service account name
serviceAccountName: null

# service settings
service:
  enabled: true
  name: null
  type: ClusterIP
  annotations: {}
  # override .Values.ports with these values
  ports: null

# setup pvc for the node
persistentVolume:
  ## If true, will create/use a Persistent Volume Claim
  ## If false, use emptyDir
  enabled: true

  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  accessModes:
    - ReadWriteOnce

  ## Persistent Volume labels
  labels: {}

  ## Persistent Volume annotations
  annotations: {}

  ## Persistent Volume existing claim name
  ## Requires persistentVolume.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  storageClass: null

  ## Subdirectory of data Persistent Volume to mount
  ## Useful if the volume's root directory is not empty
  subPath: ""

  ## Persistent Volume Claim Selector
  ## Useful if Persistent Volumes have been provisioned in advance
  ## Ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector
  selector: null
  ## ex:
  # selector:
  #  matchLabels:
  #    release: "stable"
  #  matchExpressions:
  #    - { key: environment, operator: In, values: [ dev ] }

  ## Persistent Volume Name
  ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one
  ##
  volumeName: null
  # volumeName: ""

  volumeBindingMode: null

emptyDir:
  ## emptyDir volume size limit
  sizeLimit: null

# mount secrets as files, useful for mounting key file
extraSecretMounts:
  []
  # - name: node-private-key
  #   mountPath: /data
  #   subPath: /keychain/node-private-key
  #   secretName: node-private-key
  #   readOnly: true

# mount config as files, useful for mounting the config file
extraConfigMounts:
  []
  # - name: node-config
  #   mountPath: /data
  #   subPath: /data/node-config.toml
  #   configName: node-config
  #   readOnly: true

# resource limits for the node
resources:
  requests:
    cpu: "300m"
    memory: 4Gi
  limits:
    memory: 16Gi

# override the start command to start the rpc
command: null

# readiness probe
readinessProbe:
  enabled: false
  httpGet:
    path: /status
    port: 26657
  # initialDelaySeconds: 30
  # periodSeconds: 10
  # timeoutSeconds: 5
  # successThreshold: 1
  # failureThreshold: 3

# liveness probe
livenessProbe:
  enabled: false
  httpGet:
    path: /health
    port: 26657
  # initialDelaySeconds: 30
  # periodSeconds: 10
  # timeoutSeconds: 5
  # successThreshold: 1
  # failureThreshold: 3

# startup probe
# start only when the rpc is at this block
simpleStartupProbe:
  enabled: false
  height: 542000

startupProbe:
  enabled: false

imagePullSecrets: []
nodeSelector: {}
tolerations: []
affinity: {}
podAnnotations: {}
podSecurityContext: {}
securityContext: {}

# backwards compatibility, remove if no one is using statefulsets
useStatefulSet: false
